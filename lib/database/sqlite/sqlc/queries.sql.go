// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package sqlc

import (
	"context"
)

const addAccount = `-- name: AddAccount :exec
insert into user_account(id, display_name, password, created_at, updated_at) values (?, ?, ?, ?, ?)
`

type AddAccountParams struct {
	ID          string
	DisplayName string
	Password    string
	CreatedAt   int64
	UpdatedAt   int64
}

func (q *Queries) AddAccount(ctx context.Context, arg AddAccountParams) error {
	_, err := q.db.ExecContext(ctx, addAccount,
		arg.ID,
		arg.DisplayName,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const addArticle = `-- name: AddArticle :exec
insert into article(id, title, content, created_at, account_id) values (?, ?, ?, ?, ?)
`

type AddArticleParams struct {
	ID        string
	Title     string
	Content   string
	CreatedAt int64
	AccountID string
}

func (q *Queries) AddArticle(ctx context.Context, arg AddArticleParams) error {
	_, err := q.db.ExecContext(ctx, addArticle,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.CreatedAt,
		arg.AccountID,
	)
	return err
}

const findAccountById = `-- name: FindAccountById :one
select id, display_name, created_at, updated_at from user_account where id = ?
`

type FindAccountByIdRow struct {
	ID          string
	DisplayName string
	CreatedAt   int64
	UpdatedAt   int64
}

func (q *Queries) FindAccountById(ctx context.Context, id string) (FindAccountByIdRow, error) {
	row := q.db.QueryRowContext(ctx, findAccountById, id)
	var i FindAccountByIdRow
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findArticles = `-- name: FindArticles :many
select id, title, content, created_at, account_id from article limit ? offset ?
`

type FindArticlesParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) FindArticles(ctx context.Context, arg FindArticlesParams) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, findArticles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.AccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeArticle = `-- name: RemoveArticle :exec
delete from article where id = ?
`

func (q *Queries) RemoveArticle(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, removeArticle, id)
	return err
}

const verifyAccount = `-- name: VerifyAccount :one
select id from user_account where id = ? and password = ? limit 1
`

type VerifyAccountParams struct {
	ID       string
	Password string
}

func (q *Queries) VerifyAccount(ctx context.Context, arg VerifyAccountParams) (string, error) {
	row := q.db.QueryRowContext(ctx, verifyAccount, arg.ID, arg.Password)
	var id string
	err := row.Scan(&id)
	return id, err
}
