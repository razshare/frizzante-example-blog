// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"
)

const sqlAddAccount = `-- name: SqlAddAccount :exec
insert into user_account(id,
                         display_name,
                         password,
                         created_at,
                         updated_at)
values (?, ?, ?, ?, ?)
`

type SqlAddAccountParams struct {
	ID          string
	DisplayName string
	Password    string
	CreatedAt   int32
	UpdatedAt   int32
}

func (q *Queries) SqlAddAccount(ctx context.Context, arg SqlAddAccountParams) error {
	_, err := q.db.ExecContext(ctx, sqlAddAccount,
		arg.ID,
		arg.DisplayName,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const sqlAddArticle = `-- name: SqlAddArticle :exec
insert into article(id,
                    created_at,
                    account_id)
values (?, ?, ?)
`

type SqlAddArticleParams struct {
	ID        string
	CreatedAt int32
	AccountID string
}

func (q *Queries) SqlAddArticle(ctx context.Context, arg SqlAddArticleParams) error {
	_, err := q.db.ExecContext(ctx, sqlAddArticle, arg.ID, arg.CreatedAt, arg.AccountID)
	return err
}

const sqlAddArticleContent = `-- name: SqlAddArticleContent :exec
insert into article_content(id,
                            created_at,
                            article_id,
                            title,
                            content)
values (?, ?, ?, ?, ?)
`

type SqlAddArticleContentParams struct {
	ID        string
	CreatedAt int32
	ArticleID string
	Title     string
	Content   string
}

func (q *Queries) SqlAddArticleContent(ctx context.Context, arg SqlAddArticleContentParams) error {
	_, err := q.db.ExecContext(ctx, sqlAddArticleContent,
		arg.ID,
		arg.CreatedAt,
		arg.ArticleID,
		arg.Title,
		arg.Content,
	)
	return err
}

const sqlAddComment = `-- name: SqlAddComment :exec
insert into comment(id,
                    created_at,
                    account_id,
                    article_id)
values (?, ?, ?, ?)
`

type SqlAddCommentParams struct {
	ID        string
	CreatedAt int32
	AccountID string
	ArticleID string
}

func (q *Queries) SqlAddComment(ctx context.Context, arg SqlAddCommentParams) error {
	_, err := q.db.ExecContext(ctx, sqlAddComment,
		arg.ID,
		arg.CreatedAt,
		arg.AccountID,
		arg.ArticleID,
	)
	return err
}

const sqlAddCommentContent = `-- name: SqlAddCommentContent :exec
insert into comment_content(id,
                            created_at,
                            comment_id,
                            content)
values (?, ?, ?, ?)
`

type SqlAddCommentContentParams struct {
	ID        string
	CreatedAt int32
	CommentID string
	Content   string
}

func (q *Queries) SqlAddCommentContent(ctx context.Context, arg SqlAddCommentContentParams) error {
	_, err := q.db.ExecContext(ctx, sqlAddCommentContent,
		arg.ID,
		arg.CreatedAt,
		arg.CommentID,
		arg.Content,
	)
	return err
}

const sqlChangeAccount = `-- name: SqlChangeAccount :exec
update user_account
set display_name = ?,
    password     = ?,
    updated_at   = ?
where id = ?
`

type SqlChangeAccountParams struct {
	DisplayName string
	Password    string
	UpdatedAt   int32
	ID          string
}

func (q *Queries) SqlChangeAccount(ctx context.Context, arg SqlChangeAccountParams) error {
	_, err := q.db.ExecContext(ctx, sqlChangeAccount,
		arg.DisplayName,
		arg.Password,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const sqlFindAccountById = `-- name: SqlFindAccountById :many
select id,
       display_name,
       created_at,
       updated_at
from user_account
where id = ?
`

type SqlFindAccountByIdRow struct {
	ID          string
	DisplayName string
	CreatedAt   int32
	UpdatedAt   int32
}

func (q *Queries) SqlFindAccountById(ctx context.Context, id string) ([]SqlFindAccountByIdRow, error) {
	rows, err := q.db.QueryContext(ctx, sqlFindAccountById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SqlFindAccountByIdRow
	for rows.Next() {
		var i SqlFindAccountByIdRow
		if err := rows.Scan(
			&i.ID,
			&i.DisplayName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sqlFindAccounts = `-- name: SqlFindAccounts :many
select id,
       display_name,
       created_at,
       updated_at
from user_account
limit ?, ?
`

type SqlFindAccountsParams struct {
	Offset int32
	Limit  int32
}

type SqlFindAccountsRow struct {
	ID          string
	DisplayName string
	CreatedAt   int32
	UpdatedAt   int32
}

func (q *Queries) SqlFindAccounts(ctx context.Context, arg SqlFindAccountsParams) ([]SqlFindAccountsRow, error) {
	rows, err := q.db.QueryContext(ctx, sqlFindAccounts, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SqlFindAccountsRow
	for rows.Next() {
		var i SqlFindAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.DisplayName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sqlFindArticleContent = `-- name: SqlFindArticleContent :one
select content
from article_content
where article_id = ?
order by created_at desc
limit 1
`

func (q *Queries) SqlFindArticleContent(ctx context.Context, articleID string) (string, error) {
	row := q.db.QueryRowContext(ctx, sqlFindArticleContent, articleID)
	var content string
	err := row.Scan(&content)
	return content, err
}

const sqlFindArticles = `-- name: SqlFindArticles :many
select id,
       created_at,
       account_id
from article
limit ?, ?
`

type SqlFindArticlesParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) SqlFindArticles(ctx context.Context, arg SqlFindArticlesParams) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, sqlFindArticles, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.AccountID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sqlFindCommentContent = `-- name: SqlFindCommentContent :one
select content
from comment_content
where id = ?
order by created_at desc
limit 1
`

func (q *Queries) SqlFindCommentContent(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, sqlFindCommentContent, id)
	var content string
	err := row.Scan(&content)
	return content, err
}

const sqlFindCommentsByArticleId = `-- name: SqlFindCommentsByArticleId :many
select id,
       created_at,
       account_id,
       article_id
from comment
where article_id = ?
limit ?, ?
`

type SqlFindCommentsByArticleIdParams struct {
	ArticleID string
	Offset    int32
	Limit     int32
}

func (q *Queries) SqlFindCommentsByArticleId(ctx context.Context, arg SqlFindCommentsByArticleIdParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, sqlFindCommentsByArticleId, arg.ArticleID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.AccountID,
			&i.ArticleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sqlRemoveArticle = `-- name: SqlRemoveArticle :exec
delete
from article
where id = ?
`

func (q *Queries) SqlRemoveArticle(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, sqlRemoveArticle, id)
	return err
}

const sqlRemoveComment = `-- name: SqlRemoveComment :exec
delete
from comment
where id = ?
`

func (q *Queries) SqlRemoveComment(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, sqlRemoveComment, id)
	return err
}

const sqlVerifyAccount = `-- name: SqlVerifyAccount :one
select id
from user_account
where id = ?
  and Password = ?
limit 1
`

type SqlVerifyAccountParams struct {
	ID       string
	Password string
}

func (q *Queries) SqlVerifyAccount(ctx context.Context, arg SqlVerifyAccountParams) (string, error) {
	row := q.db.QueryRowContext(ctx, sqlVerifyAccount, arg.ID, arg.Password)
	var id string
	err := row.Scan(&id)
	return id, err
}
